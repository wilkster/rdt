{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 21 files for \"Settings\"\n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\rdt.tcl:\n   40  }\n   41  package require rdtMetakit\n   42: package require settings\n   43  package require WinTaskBar\n   44  package require TreeSearch\n   ..\n  113     variable folders [list]\n  114     variable folderID [list]\n  115:    variable settingsDir \"\"\n  116:    variable settingsFile \"\"\n  117     variable iconCache \"\"\n  118     variable shareMapping\n  ...\n  141  \n  142     if {[file exists [file join $env(USERPROFILE) \".rdt\"]]} {\n  143:       variable settingsDir [file join $env(USERPROFILE) \".rdt\"]\n  144     } else {\n  145        # migrate to appdata -> CSIDL_APPDATA\n  146:       variable settingsDir [file join $env(LOCALAPPDATA) \"RDT\"]\n  147     }\n  148:    set iconCache [file join $settingsDir \"IconCache.bin\"]\n  149:    S::setHome $settingsDir\n  150  }\n  151  #------------------------------------------------------------------------------\n  ...\n  636     global env\n  637     variable SCHASH\n  638:    variable settingsDir\n  639:    variable settingsFile [file join $settingsDir rdt.txt]\n  640     ##\n  641     # Load prior shortcut hash file\n  642     #\n  643:    if {![file isdirectory $settingsDir]} {\n  644:       file mkdir $settingsDir\n  645:    } elseif {[file exists $settingsFile]} {\n  646:       if {[catch {open $settingsFile r} fid] } then {\n  647           logerr $fid\n  648        } else {\n  ...\n  658  #------------------------------------------------------------------------------\n  659  proc rdt::saveHash {args} {\n  660:    variable settingsFile\n  661     variable SCHASH\n  662:    if {[catch {open $settingsFile w} fod] } then {\n  663        logerr $fod\n  664     } else {\n  ...\n  674     variable folders\n  675     variable folderID\n  676:    variable settingsDir\n  677     variable iconCache\n  678     winTaskBar::RemoveIcons\n  ...\n  688        rdt::saveHash\n  689        db::closeDB\n  690:       # Save User Settings\n  691:       S::saveSettings\n  692        # save icon images\n  693        iconDB::saveDB $iconCache\n  ...\n  715  }\n  716  #----------------------------------------------------------------------------\n  717: # Clear all settings (not currently used)\n  718  #----------------------------------------------------------------------------\n  719: proc rdt::resetSettings {args} {\n  720     variable SCHASH\n  721     if {[tk_messageBox -title \"Please Confirm\" -type yesno -icon question -message \"Are you sure you want to clear all history?\\nthis will reset the database.\"] eq \"yes\"} {\n  ...\n  803  #------------------------------------------------------------------------------\n  804  #  Determine if computer is plugged in\n  805: # if settings clear then always return 1\n  806  #------------------------------------------------------------------------------\n  807  proc rdt::onACPower {args} {\n  ...\n  895              if {[catch {file stat $dest data} error]} then {\n  896                 #ignore files when I can't check the timestamp\n  897:                #tfw added back in 3/18/2017 to delete link if settings permit\n  898                 tsv::lpush rdt fgHashOutQueue [list $dest $shortcut $stime $sckey \"\" \"\"]\n  899              } else {\n  ...\n 1073  # open the database\n 1074  db::openDB\n 1075: # read settings file\n 1076: S::readSettings\n 1077  # bind the hotkey if necessary\n 1078  S::setupOnTop\n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\lib\\iconDB.tcl:\n   10  #------------------------------------------------------------------------------\n   11  # Create all of the icon types based on the icon bar\n   12: # TODO: Support ! or ~ function for extensions in settings, i.e. ignore those patterns\n   13  # Called after scan is complete, database should have all files in it\n   14  #------------------------------------------------------------------------------\n   ..\n  192  }\n  193  #------------------------------------------------------------------------------\n  194: #  Restore the icon database from a settings file\n  195  #------------------------------------------------------------------------------\n  196  proc iconDB::restoreDB {iconDB} {\n  ...\n  245  #----------------------------------------------------------------------------\n  246  # todo, split into two parts\n  247: # 2. Then read user settings and append/replace by hash\n  248: # 3. Then loop over the settings and create the icon images and taskbar icons\n  249  #\n  250  proc iconDB::loadPngFiles {folders} {\n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\lib\\metakit.tcl:\n   32     variable fieldSpec\n   33     variable DB\n   34:    set dbLocation [file nativename [file join $rdt::settingsDir \"rdt.mk\"]]\n   35     set fieldSpec [list File Folder Ext IsFolder:I Ftime:I Sctime:I Mounted:I Exists:I Hits:I Pinned:I Excluded:I IsOpen:I IconType Image]\n   36     if {[catch {mk::file open db $dbLocation -nocommit} result]} {\n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\lib\\pkgIndex.tcl:\n    7  package ifneeded twapi           1.0 [list source [file join $dir twapi.tcl]]\n    8  package ifneeded rdtMetakit      1.0 [list source [file join $dir metakit.tcl]]\n    9: package ifneeded settings        1.0 [list source [file join $dir settings.tcl]]\n   10  package ifneeded tileTable       1.0 [list source [file join $dir tiletable.tcl]]\n   11  package ifneeded iconDB          1.0 [list source [file join $dir iconDB.tcl]]\n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\lib\\settings.tcl:\n    1  #----------------------------------------------------------------------------\n    2: # Save the settings contained in variable S::S\n    3  #----------------------------------------------------------------------------\n    4  namespace eval S {\n    .\n    7     variable IconsSave\n    8     variable Stemp\n    9:    variable settingsDir\n   10:    variable settingsFile\n   11     variable iconsFile\n   12     variable lastKey\n   ..\n   31     set S(checkOpen)      0\n   32     set S(autoStart)      1\n   33:    namespace export saveSettings setIconState getTrayIconData getTrayIcons readSettings saveIcons\n   34:    # To detect changes to future button settings\n   35     trace variable ::S::S(SwapButton) w S::ButtonSwapped\n   36  }\n   ..\n   50  #------------------------------------------------------------------------------\n   51  proc S::setHome {where} {\n   52:    variable settingsDir $where\n   53  }\n   54: proc S::readSettings {args} {\n   55     global env\n   56:    variable settingsDir\n   57     variable S\n   58     variable Icons\n   59:    variable settingsFile [file join $settingsDir \"settings.txt\"]\n   60:    variable settings2File [file join $settingsDir \"settings2.txt\"]\n   61:    variable iconsFile [file join $settingsDir \"trayIcons.txt\"]\n   62     ##\n   63     # Load prior shortcut hash file\n   64     #\n   65:    if {![file isdirectory $settingsDir]} {\n   66:       file mkdir $settingsDir\n   67:    } elseif {[file exists $settings2File]} {\n   68        try {\n   69:          set fid [open $settings2File r]\n   70:          set settingsData [read $fid]\n   71           # old or new style?\n   72:          if {[string match \"#*\" $settingsData]} {\n   73              try {\n   74:                eval $settingsData\n   75              } on error result {\n   76                 tk_messageBox -icon warning -type ok -title \"Open Error\" \\\n   77:                -message \"Error interpreting $settingsFile\\n$::errorInfo\"\n   78                 logerr $result\n   79              }\n   80           } else {\n   81:             array set S $settingsData\n   82           }\n   83           close $fid\n   ..\n   85           logerr $result\n   86        }\n   87:    } elseif {[file exists $settingsFile]} {\n   88        try {\n   89:          set fid [open $settingsFile r]\n   90:          set settingsData [read $fid]\n   91:          array set S $settingsData\n   92        } on error result {\n   93           tk_messageBox -icon warning -type ok -title \"Open Error\" \\\n   94:          -message \"Error interpreting $settingsFile\\n$::errorInfo\"\n   95           logerr $result\n   96        }\n   ..\n  103  icons in the task tray. Use left or right mouse buttons\n  104  on each icon to launch a quick menu or more powerful\n  105: search table.  You can also adjust settings from then menu.\n  106: New icons/settings will be created in '$settingsDir' for you.\n  107  To uninstall you may remove the application folder and all\n  108: files in '$settingsDir'. The windows registry is not use.     \n  109  \n  110: Use the settings->Manage Tray Icons option to modify the tray icons\n  111: and their file settings.  \n  112  \n  113  The inital scan may take a few moments to populate the database.\n  ...\n  118  \" -type yesno -title \"Press OK when done\" -icon info]\n  119        if {$res eq \"yes\"} {\n  120:          after 3000 S::settingsGUI   \n  121        }\n  122        # Create an autostart (if user wants it)\n  ...\n  125     }\n  126     ##\n  127:    # Check for default file, copy it an icons to settings folder as default\n  128     #\n  129     if {! [file exists $iconsFile]} {\n  ...\n  132        # copy over icons as needed\n  133        foreach iconFile [lsort [glob -nocomplain -directory $::HOME \"*.ico\"]] {\n  134:          set target [file join $settingsDir [file tail $iconFile]]\n  135           if {![file exists $target]} {\n  136              file copy -force $iconFile $target\n  ...\n  151        try {\n  152           set fid [open $iconsFile r]\n  153:          set settingsData [read $fid]\n  154           # old or new style?\n  155:          if {[string match \"#*\" $settingsData]} {\n  156              try {\n  157:                eval $settingsData\n  158              } on error result {\n  159                 tk_messageBox -icon warning -type ok -title \"Open Error\" \\\n  ...\n  162              }\n  163           } else {\n  164:             array set Icons $settingsData\n  165           }\n  166           close $fid\n  ...\n  170              # fully qualifty it\n  171              if {[file dirname $iconFile] eq \".\"} {\n  172:                set iconFile [file join $settingsDir [file tail $iconFile]]\n  173:                # if it exists in user settings dir then change it\n  174                 if {[file exists $iconFile]} {\n  175                    set Icons($icon) [list $show $iconFile $exts]\n  ...\n  185  #  Save the shortcut hash file for next time\n  186  #------------------------------------------------------------------------------\n  187: proc S::saveSettings {args} {\n  188     variable S\n  189:    variable settingsDir\n  190:    variable settings2File [file join $settingsDir \"settings2.txt\"]\n  191:    variable settingsFile\n  192     variable iconsFile\n  193:    # User Settings\n  194     try {\n  195:       set fod [open $settings2File w]\n  196        fconfigure $fod -buffersize 20000\n  197        set result \"#######\\n\"\n  198:       append result \"# RDT Settings File Saved [clock format [clock seconds]]\\n\"\n  199        append result \"#\\n\"\n  200        append result \"array set S::S \\{\\n\"\n  ...\n  210     } on error result {\n  211        tk_messageBox -icon warning -type ok -title \"Open Error\" \\\n  212:       -message \"Error opening $settingsFile\\n$::errorInfo\"\n  213        logerr $result\n  214     }\n  215:    # Icon Settings\n  216     try {\n  217        set fod [open $iconsFile w]\n  218        fconfigure $fod -buffersize 20000\n  219        set result \"#######\\n\"\n  220:       append result \"# RDT Icon Settings File Saved [clock format [clock seconds]]\\n\"\n  221        append result \"#\\n\"\n  222        append result \"array set S::Icons \\{\\n\"\n  ...\n  309  }\n  310  #---------------------------------------------------------------------------- \n  311: # After saving the data put it back into original settings format\n  312  #---------------------------------------------------------------------------- \n  313  proc S::SpoolIconData {args} {\n  ...\n  315     variable Icons\n  316     variable IconsSave\n  317:    variable settingsDir\n  318     # since we use a number as key, this will fix any renamed icons\n  319     set prior [list]\n  ...\n  329        }\n  330        set iconFile $Stemp(iconFile,$key)\n  331:       if {[file dirname $iconFile] ne $settingsDir} {\n  332           # if iconfile not a .ico then\n  333:          # 1. create a copy as .ico in settings\n  334           # 2.\n  335           # set h [iconDB::readIconFile $file]\n  ...\n  340  \n  341              if {$img ne \"\"} {\n  342:                set target [file join $settingsDir ${iconName}.ico]\n  343                 ::ico::writeIcon $target 0 32 $img\n  344                 set iconFile $target\n  ...\n  399  }\n  400  #------------------------------------------------------------------------------\n  401: # Bring up the settings GUI allowing the icon types to be modified\n  402  #------------------------------------------------------------------------------\n  403: proc S::settingsGUI {args} {\n  404     variable S\n  405     variable Stemp\n  ...\n  411     saveIcons\n  412  \n  413:    destroy .settings\n  414:    toplevel .settings\n  415:    wm title .settings \"Alter Tray Icons Below\"\n  416:    wm protocol .settings WM_DELETE_WINDOW {S::sgCancel}\n  417:    wm protocol .settings WM_SAVE_YOURSELF {S::sgCancel}\n  418:    set fr [ttk::labelframe .settings.fr -text \"Tray Icon Settings\"]\n  419     pack $fr -expand true -fill both\n  420     unSpoolIconData\n  ...\n  447     # expand the file types\n  448     grid columnconfigure $fr 4 -weight 1\n  449:    set frb [ttk::frame .settings.buttons -padding 3]\n  450     pack $frb -expand true -fill both\n  451     grid  \\\n  ...\n  513             [ttk::entry $fr.${key}-lbl -textvariable S::Stemp(iconName,$key) -width 20]  \\\n  514             [ttk::entry $fr.${key}-ext -textvariable S::Stemp(iconExts,$key) -width 120]\n  515:       # Note - The tray icon doesn't exist yet, only have settings are closed will it exist\n  516:       # write out icon to the settings folder so we have it for later?\n  517     }\n  518  }\n  ...\n  537        $button configure -image $h\n  538     }\n  539:    # write out icon to the settings folder so we have it for later?\n  540  }\n  541  \n  ...\n  543  #------------------------------------------------------------------------------\n  544  proc S::sgCancel {args} {\n  545:    destroy .settings\n  546  }\n  547  proc S::sgSave {args} {\n  ...\n  555     # Any changes will show up in difference of Icons and IconsSave\n  556     SpoolIconData\n  557:    destroy .settings\n  558     winTaskBar::initTray\n  559  }\n  ...\n  688  \n  689  \n  690: package provide settings 1.0\n  691  \n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\lib\\winTaskBar.tcl:\n   31        #remove any existing icons first\n   32        iconDB::clearTypes\n   33:       # Icons for the taskbar, extract image for settings as well (user setting)\n   34        # create icon instance if they don't exist\n   35        foreach {iconName} [lsort [S::getTrayIcons]] {\n   ..\n   86  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   87  #------------------------------------------------------------------------------\n   88: # Build the settings menu\n   89  #------------------------------------------------------------------------------\n   90  proc winTaskBar::buildSettingMenu {Menu} {\n   ..\n   93     $Menu delete 0 end\n   94     $Menu add command -label \"Manage Tray Icons...\" \\\n   95:       -command S::settingsGUI \\\n   96        -compound left -image [iconDB::extToIcon filter]\n   97     $Menu add command -label \"Reset Database and rescan shortcuts\" \\\n   ..\n  105        -command [list fileScan::scanFolder winTaskBar::lastIcon] \\\n  106        -compound left -image [iconDB::extToIcon find]\n  107:    # Cascade Menu for settings\n  108: #   $suSettings add checkbutton -variable S::S(autoStart) -label \"RDT is auto started on login\" -command S::makeShortcut\n  109: #   $bgSettings add checkbutton -variable S::S(deleteStale) -label \"Background Remove Stale Entries from Database\"\n  110:    $Menu.rtSettings delete 0 end\n  111:    $Menu.suSettings delete 0 end\n  112:    $Menu.bgSettings delete 0 end\n  113  #----------------------------------RUN TIME -----------------------------------------\n  114:    $Menu.rtSettings.limitNum delete 0 end\n  115:    $Menu.rtSettings.bias delete 0 end\n  116     foreach {num} {5 10 15 25 30 35 40 50 60} {\n  117:       $Menu.rtSettings.limitNum add radiobutton -value $num -label $num -variable S::S(limit)\n  118     }\n  119:    $Menu.rtSettings add cascade  -label \"Limit Menu Entries to...\" -menu $Menu.rtSettings.limitNum \\\n  120        -compound left -image [iconDB::extToIcon limit]\n  121  \n  122     foreach {num} {0.4 0.5 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95} {\n  123:       $Menu.rtSettings.bias add radiobutton -value $num -label \"[expr {$num*100.0}]%\" -variable S::S(bias) \n  124     }\n  125  \n  126:    $Menu.rtSettings add cascade  -label \"Bias file name width in Search Table...\" -menu $Menu.rtSettings.bias  \\\n  127        -compound left -image [iconDB::extToIcon bias]\n  128:    $Menu.rtSettings add separator\n  129  \n  130:    $Menu.rtSettings add checkbutton -variable S::S(Focus) -label \"Close Search Table when it loses Focus\"\n  131:    $Menu.rtSettings add checkbutton -variable S::S(checkOpen) -label \"Check for open files and flag in Menu/Search Table\"\n  132:    $Menu.rtSettings add checkbutton -variable S::S(ontop) -label \"Bind Alt-Spacebar to toggle window stay on top\" \\\n  133        -command S::setupOnTop\n  134:    $Menu.rtSettings add checkbutton -variable S::S(SwapButton) -label \"Reverse function of left and right Mouse buttons\"\n  135     if {$state eq \"normal\"} {\n  136:       $Menu.rtSettings add command -label \"Hide Console\" -command \"console hide\" \\\n  137        -compound left -image [iconDB::extToIcon console]\n  138     } else {\n  139:       $Menu.rtSettings add command -label \"Show Console\" -command \"console show\" \\\n  140        -compound left -image [iconDB::extToIcon console]\n  141     }\n  ...\n  143  #----------------------------------BACKGROUND -----------------------------------------\n  144  \n  145:    $Menu.bgSettings.age delete 0 end\n  146     foreach {num} {7 14 30 60 90 120 180 365 1000 never} {\n  147:       $Menu.bgSettings.age add radiobutton -value $num -label $num -variable S::S(age) \\\n  148        -command rdt::purgeOldShortCuts\n  149     }\n  150:    $Menu.bgSettings add cascade  -label \"Remove entries older than (days)...\" -menu $Menu.bgSettings.age \\\n  151        -compound left -image [iconDB::extToIcon clock]\n  152:    $Menu.bgSettings add checkbutton -variable S::S(deleteDead) -label \"Remove Shortcuts when file missing\"\n  153  \n  154  #----------------------------------STARTUP -----------------------------------------\n  155  \n  156:    $Menu.suSettings add checkbutton -variable S::S(resetIconCache) -label \"Rebuild icon cache on next startup\"\n  157:    $Menu.suSettings add checkbutton -variable S::S(limitOnBattery) -label \"Limit scanning when on battery power\"\n  158  \n  159     # assumes submenu type already created (which they are in init)\n  ...\n  161  \n  162     $Menu add separator\n  163:    $Menu add cascade -label \"Runtime Settings...\" -menu $Menu.rtSettings \n  164:    $Menu add cascade -label \"Background Settings...\" -menu $Menu.bgSettings \n  165:    $Menu add cascade -label \"Startup Settings...\" -menu $Menu.suSettings \n  166     # can this be done once during init and reused?\n  167  #----------------------------------BOTTOM ICONS -----------------------------------------\n  ...\n  279     }\n  280     $Menu add separator\n  281:    # Settings menu (created during init)\n  282  #      $Menu add command \\\n  283  #         -label \"Sleep Computer\" \\\n  284  #         -command [list twapi::suspend_system -state standby -disablewakeevents true]  \\\n  285  #         -compound left -image [iconDB::extToIcon hibernate]\n  286:    $Menu add cascade -label \"Settings...\" -menu $Menu.settings \\\n  287:       -compound left -image [iconDB::extToIcon settings]\n  288:    $Menu.settings configure \\\n  289:       -postcommand [list winTaskBar::buildSettingMenu $Menu.settings]\n  290  \n  291     if {$isFolder} {\n  ...\n  506  # Class Definition for trayIcon\n  507  # Usage: Create an icon passing in file name for icon and if it is to be shownn\n  508: #  methods to sync to a new settings data and to destroy an icon\n  509  # \n  510  # \n  ...\n  555           # cascade setting menus for RMB\n  556           #menu $myMenu.type -tearoff 0\n  557:          # settings cascade\n  558:          menu $myMenu.settings          -tearoff 0\n  559:          #menu $myMenu.settings.type     -tearoff 0\n  560:          menu $myMenu.settings.rtSettings -tearoff 0\n  561:          menu $myMenu.settings.bgSettings -tearoff 0\n  562:          menu $myMenu.settings.suSettings -tearoff 0\n  563:          menu $myMenu.settings.bgSettings.age      -tearoff 0\n  564:          menu $myMenu.settings.rtSettings.limitNum -tearoff 0\n  565:          menu $myMenu.settings.rtSettings.bias     -tearoff 0\n  566:          menu $myMenu.settings.wid      -tearoff 0\n  567        } on error result {\n  568          console show\n  ...\n  609     #  ----------------------------------------------------------------------------\n  610     public {\n  611:       # Called after settings change\n  612        method sync {show iconFile fileExts} {\n  613           set ts [file mtime $iconFile]\n  ...\n  660     }\n  661     #---------------------------------------------------------------------------- \n  662:    # Update the tip if changed in user settings, called from settings\n  663     #---------------------------------------------------------------------------- \n  664     method updateTip {Tip} {\n\nC:\\Users\\tomwi\\Google Drive\\Code\\rdt\\rdt.vfs\\lib\\.vscode\\settings.json:\n    1: // Place your settings in this file to overwrite default and user settings.\n    2  {\n    3  }\n\n175 matches across 7 files\n",
			"settings":
			{
				"buffer_size": 21732,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "rdt.vfs/lib/settings.tcl",
			"settings":
			{
				"buffer_size": 24672,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rdt.vfs/lib/pkgIndex.tcl",
			"settings":
			{
				"buffer_size": 951,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/tomwi/Google Drive/Code/rdt/rdt.vfs",
		"/C/Users/tomwi/Google Drive/Code/rdt/rdt.vfs/lib"
	],
	"file_history":
	[
		"/C/Users/tomwi/Google Drive/Code/rdt/rdt.vfs/lib/winTaskBar.tcl",
		"/C/Users/tomwi/Google Drive/Code/rdt/rdt.vfs/lib/tiletable.tcl",
		"/C/Users/tomwi/Google Drive/Code/rdt/rdt.vfs/lib/metakit.tcl"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Settings",
			"rtSettings",
			"hashShortcut"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21732,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										155,
										163
									],
									[
										326,
										334
									],
									[
										360,
										368
									],
									[
										544,
										552
									],
									[
										685,
										693
									],
									[
										782,
										790
									],
									[
										833,
										841
									],
									[
										1013,
										1021
									],
									[
										1044,
										1052
									],
									[
										1069,
										1077
									],
									[
										1191,
										1199
									],
									[
										1232,
										1240
									],
									[
										1278,
										1286
									],
									[
										1326,
										1334
									],
									[
										1553,
										1561
									],
									[
										1620,
										1628
									],
									[
										1774,
										1782
									],
									[
										1932,
										1940
									],
									[
										1961,
										1969
									],
									[
										2160,
										2168
									],
									[
										2297,
										2305
									],
									[
										2671,
										2679
									],
									[
										3042,
										3050
									],
									[
										3246,
										3254
									],
									[
										3274,
										3282
									],
									[
										3608,
										3616
									],
									[
										3954,
										3962
									],
									[
										4250,
										4258
									],
									[
										4317,
										4325
									],
									[
										4598,
										4606
									],
									[
										5099,
										5107
									],
									[
										5148,
										5156
									],
									[
										5505,
										5513
									],
									[
										5731,
										5739
									],
									[
										5762,
										5770
									],
									[
										5936,
										5944
									],
									[
										5991,
										5999
									],
									[
										6057,
										6065
									],
									[
										6283,
										6291
									],
									[
										6330,
										6338
									],
									[
										6388,
										6396
									],
									[
										6465,
										6473
									],
									[
										6490,
										6498
									],
									[
										6503,
										6511
									],
									[
										6537,
										6545
									],
									[
										6563,
										6571
									],
									[
										6576,
										6584
									],
									[
										6633,
										6641
									],
									[
										6763,
										6771
									],
									[
										6804,
										6812
									],
									[
										6850,
										6858
									],
									[
										6918,
										6926
									],
									[
										6955,
										6963
									],
									[
										7056,
										7064
									],
									[
										7126,
										7134
									],
									[
										7311,
										7319
									],
									[
										7454,
										7462
									],
									[
										7598,
										7606
									],
									[
										7665,
										7673
									],
									[
										7701,
										7709
									],
									[
										7755,
										7763
									],
									[
										7922,
										7930
									],
									[
										8167,
										8175
									],
									[
										8209,
										8217
									],
									[
										8239,
										8247
									],
									[
										8345,
										8353
									],
									[
										8420,
										8428
									],
									[
										8502,
										8510
									],
									[
										8725,
										8733
									],
									[
										8896,
										8904
									],
									[
										9151,
										9159
									],
									[
										9375,
										9383
									],
									[
										9476,
										9484
									],
									[
										9546,
										9554
									],
									[
										9767,
										9775
									],
									[
										9975,
										9983
									],
									[
										10055,
										10063
									],
									[
										10371,
										10379
									],
									[
										10429,
										10437
									],
									[
										10460,
										10468
									],
									[
										10486,
										10494
									],
									[
										10499,
										10507
									],
									[
										10534,
										10542
									],
									[
										10593,
										10601
									],
									[
										10646,
										10654
									],
									[
										10780,
										10788
									],
									[
										11062,
										11070
									],
									[
										11147,
										11155
									],
									[
										11335,
										11343
									],
									[
										11633,
										11641
									],
									[
										11852,
										11860
									],
									[
										12080,
										12088
									],
									[
										12187,
										12195
									],
									[
										12366,
										12374
									],
									[
										12619,
										12627
									],
									[
										12773,
										12781
									],
									[
										12893,
										12901
									],
									[
										12922,
										12930
									],
									[
										12951,
										12959
									],
									[
										13008,
										13016
									],
									[
										13071,
										13079
									],
									[
										13146,
										13154
									],
									[
										13175,
										13183
									],
									[
										13373,
										13381
									],
									[
										13727,
										13735
									],
									[
										13798,
										13806
									],
									[
										13953,
										13961
									],
									[
										14156,
										14164
									],
									[
										14328,
										14336
									],
									[
										14422,
										14430
									],
									[
										14643,
										14651
									],
									[
										14988,
										14996
									],
									[
										15259,
										15267
									],
									[
										15578,
										15586
									],
									[
										15601,
										15609
									],
									[
										15729,
										15737
									],
									[
										15855,
										15863
									],
									[
										15895,
										15903
									],
									[
										15935,
										15943
									],
									[
										16068,
										16076
									],
									[
										16117,
										16125
									],
									[
										16219,
										16227
									],
									[
										16329,
										16337
									],
									[
										16399,
										16407
									],
									[
										16581,
										16589
									],
									[
										16713,
										16721
									],
									[
										16798,
										16806
									],
									[
										16893,
										16901
									],
									[
										16942,
										16950
									],
									[
										17055,
										17063
									],
									[
										17184,
										17192
									],
									[
										17343,
										17351
									],
									[
										17510,
										17518
									],
									[
										17682,
										17690
									],
									[
										17953,
										17961
									],
									[
										18065,
										18073
									],
									[
										18215,
										18223
									],
									[
										18296,
										18304
									],
									[
										18390,
										18398
									],
									[
										18612,
										18620
									],
									[
										18730,
										18738
									],
									[
										19002,
										19010
									],
									[
										19029,
										19037
									],
									[
										19086,
										19094
									],
									[
										19113,
										19121
									],
									[
										19167,
										19175
									],
									[
										19194,
										19202
									],
									[
										19419,
										19427
									],
									[
										19734,
										19742
									],
									[
										19759,
										19767
									],
									[
										19824,
										19832
									],
									[
										19850,
										19858
									],
									[
										19938,
										19946
									],
									[
										20150,
										20158
									],
									[
										20325,
										20333
									],
									[
										20371,
										20379
									],
									[
										20430,
										20438
									],
									[
										20488,
										20496
									],
									[
										20499,
										20507
									],
									[
										20548,
										20556
									],
									[
										20559,
										20567
									],
									[
										20608,
										20616
									],
									[
										20619,
										20627
									],
									[
										20668,
										20676
									],
									[
										20679,
										20687
									],
									[
										20737,
										20745
									],
									[
										20748,
										20756
									],
									[
										20806,
										20814
									],
									[
										20817,
										20825
									],
									[
										20875,
										20883
									],
									[
										21108,
										21116
									],
									[
										21375,
										21383
									],
									[
										21397,
										21405
									],
									[
										21624,
										21632
									],
									[
										21676,
										21684
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								6923,
								6923
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4682.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "rdt.vfs/lib/settings.tcl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24672,
						"regions":
						{
						},
						"selection":
						[
							[
								2368,
								2368
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 635.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "rdt.vfs/lib/pkgIndex.tcl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 951,
						"regions":
						{
						},
						"selection":
						[
							[
								379,
								379
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rdt.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 233.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
